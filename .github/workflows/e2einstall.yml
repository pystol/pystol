name: e2einstall
on: [push, pull_request]
jobs:
  build:
    # Originally from: https://github.com/kubernetes-sigs/kind/issues/865
    name: Build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]
    steps:
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt install ansible jq -y
        python -m pip install --upgrade pip
        pip install -r ./test-requirements.txt
        pip install -r ./pystol-operator/requirements.txt
    - name: Run docker login
      id: pystol-login
      run: |
        echo
        echo ">>> Docker login quay.io"
        docker login -u="pystol+bot" -p="T2K5TLLL3ERE82F22SCVUF9M0ANY1ARR7NDR4CQ6P49H654WIMEQCNS0BL3O9Y2I" quay.io

    - name: Create Kubernetes Cluster
      id: kind
      uses: engineerd/setup-kind@v0.3.0
      with:
        version: "v0.7.0"
        config: .github/e2e-templates/cluster.yaml

    - name: Install local-path provisioner
      id: local-path
      run: |
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        kubectl delete storageclass --all
        kubectl apply -f https://github.com/rancher/local-path-provisioner/raw/master/deploy/local-path-storage.yaml
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m

    - name: Define and print relevant variables
      id: pystol-define-variables
      run: |
        echo ">>> Print the GitHub commit tag"
        echo $GITHUB_SHA
        echo
        echo ">>> Define the GitHub short commit tag"
        echo "::set-env name=GITHUB_SHORT_SHA::$(git rev-parse --short $GITHUB_SHA)"
        echo
        echo ">>> Create the image name"
        IMAGE_NAME=quay.io/pystol/pystol-operator-staging
        echo "::set-env name=IMAGE_NAME::$IMAGE_NAME"
        echo

    - name: Create the container image
      id: pystol-create-image
      run: |
        echo ">>> Print the short GitHub commit tag"
        echo $GITHUB_SHORT_SHA
        echo
        echo ">>> Build the container image"
        docker build --build-arg revision=$GITHUB_SHORT_SHA -t $IMAGE_NAME:$GITHUB_SHORT_SHA .
        echo
        echo ">>> Print the image name"
        echo "docker build --build-arg revision=$GITHUB_SHORT_SHA -t $IMAGE_NAME:$GITHUB_SHORT_SHA ."
        echo

    - name: Push the container image
      id: pystol-push-image
      run: |
        echo
        echo ">>> Push the container image"
        docker push $IMAGE_NAME:$GITHUB_SHORT_SHA
        echo
        echo ">>> Get the image digest"
        IMAGE_DIGEST=$(docker images --digests --format "{{.Tag}}-{{.Digest}}" $IMAGE_NAME | grep $GITHUB_SHORT_SHA | cut -d'-' -f2)
        echo
        echo ">>> Print the image digest"
        echo $IMAGE_DIGEST
        echo
        echo "::set-env name=IMAGE_DIGEST::$IMAGE_DIGEST"
        echo
        echo ">>> Debug image digests"
        docker images --digests $IMAGE_NAME:$GITHUB_SHORT_SHA
        echo

    - name: Deploy pystol
      id: pystol-deploy
      run: |
        echo
        echo ">>> Install Pystol deployment crd and rbac"

        kubectl apply -f ./pystol-operator/pystol/templates/namespace.yaml

        cat <<EOF > ~/ci_values.yaml
        appSettings:
          pystol:
            controller:
              image: $IMAGE_NAME@$IMAGE_DIGEST
            ui:
              image: $IMAGE_NAME@$IMAGE_DIGEST
              # The pystol UI API is exposed in 3000 port by default
              port: 3000
              # This is the host where the Pystol API
              # is supossed to be listening the UI
              host: 0.0.0.0
              # The Flask app we will run
              app: run.py
        EOF

        j2 ./pystol-operator/pystol/templates/config_map.yaml.j2 \
           ~/ci_values.yaml \
           | kubectl apply -f -

        kubectl apply -f ./pystol-operator/pystol/templates/crd.yaml
        kubectl apply -f ./pystol-operator/pystol/templates/service_account.yaml
        kubectl apply -f ./pystol-operator/pystol/templates/cluster_role.yaml
        kubectl apply -f ./pystol-operator/pystol/templates/cluster_role_binding.yaml

        j2 ./pystol-operator/pystol/templates/controller.yaml.j2 \
           ~/ci_values.yaml \
           | kubectl apply -f -

        j2 ./pystol-operator/pystol/templates/ui.yaml.j2 \
           ~/ci_values.yaml \
           | kubectl apply -f -

        echo
        echo ">>> Get pods 12 times"
        for i in {1..12}; do kubectl get pods -n pystol;echo;sleep 10; done

        echo ">>> Describe pystol-ui deployment"
        kubectl describe deployment pystol-ui -n pystol

        echo ">>> Describe pystol-controller deployment"
        kubectl describe deployment pystol-controller -n pystol

        echo ">>> Get config and events"
        echo "---"
        kubectl get serviceaccounts
        echo "---"
        kubectl get clusterrolebindings
        echo "---"
        kubectl get events --all-namespaces

    - name: Debug pystol creation
      id: debug-pystol-deploy
      run: |
        echo
        echo ">>> Get pods 12 times"
        for i in {1..12}; do kubectl get pods -n pystol;echo;sleep 10; done
        echo
        echo ">>> Debug pystol-controller pod"
        kubectl describe pod -n pystol `kubectl get pods --all-namespaces | grep pystol-controller | head -n1 | tr -s ' ' | cut -d' ' -f2`
        echo
        echo ">>> Debug pystol-ui pod"
        kubectl describe pod -n pystol `kubectl get pods --all-namespaces | grep pystol-ui | head -n1 | tr -s ' ' | cut -d' ' -f2`

    - name: Build
      run: id;pwd;lsblk;df;cat /proc/mounts

    - name: Wait for all to be deployed
      run: |
        echo
        echo ">>> Wait for all running before continue"
        kubectl get all --all-namespaces
        echo ">>> Debug pystol-controller pod"
        kubectl describe pod -n pystol `kubectl get pods --all-namespaces | grep pystol-controller | head -n1 | tr -s ' ' | cut -d' ' -f2`

        # We wait for all pods to be created and running
        CONT_POD=$(kubectl get pods --all-namespaces | grep pystol-controller | head -n1 | tr -s ' ' | cut -d' ' -f2)
        while [[ $(kubectl get pods $CONT_POD -n pystol -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
          echo "waiting pystol-controller pod" && sleep 1;
          kubectl get pods -n pystol;
        done
        UI_POD=$(kubectl get pods --all-namespaces | grep pystol-ui | head -n1 | tr -s ' ' | cut -d' ' -f2)
        while [[ $(kubectl get pods $UI_POD -n pystol -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
          echo "waiting pystol-ui pod" && sleep 1;
          kubectl get pods -n pystol;
        done
        kubectl wait --for=condition=Ready pods -n kube-system --all --timeout=5m
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m

    - name: Test Pystol CLI
      run: |
        echo
        echo ">>> run pystol CLI pystol -h"
        kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol -h
        echo
        echo
        echo ">>> run pystol CLI pystol -v"
        VERSION_OUTPUT=$(kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol -v)
        echo $VERSION_OUTPUT
        echo
        echo ">>> run pystol CLI pystol -b"
        kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol -b
        echo
        echo ">>> run pystol CLI pystol pingetst"
        kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol run --namespace pystol --collection actions --role pingtest
        echo
        echo ">>> list Pystol actions"
        for i in {1..5}; do \
        kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol list; \
        echo;sleep 20; done
        echo
        echo ">>> run debug of action"
        ACTION=$(kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol list | grep pystol | head -n1 | tr -s ' ' | cut -d'|' -f2)
        kubectl exec -n pystol `kubectl get pods -n pystol | grep pystol-controller | grep Running | head -n1 | tr -s ' ' | cut -d' ' -f1` -- pystol get $ACTION --debug
        echo



        echo "Printing versions"
        echo "Version output from CLI: $VERSION_OUTPUT"
        echo "Version output from GitHub short SHA: $GITHUB_SHORT_SHA"
        echo
        PARSED_CLI=$(echo $VERSION_OUTPUT | cut -d'.' -f4 | cut -c1-5)
        echo
        echo "Version output short CLI: $PARSED_CLI"
        echo
        if [[ $GITHUB_SHORT_SHA == *$PARSED_CLI* ]]; then
            echo "GitHub commit ID matches with the deployed version"
        else
            echo "GitHub commit ID DO NOT MATCH with the deployed version"
            exit 1
        fi

    - name: Test
      run: |
        echo
        echo ">>> run pod"
        kubectl apply -f ${GITHUB_WORKSPACE}/.github/e2e-templates/rancher-provisioner-nonroot.yaml
        echo ">>> get pod"
        for i in {1..12}; do kubectl get pod;echo;sleep 5; done
        echo
        echo ">>> get pod"
        kubectl get pod volume-test -o go-template="{{range .status.containerStatuses}}{{.lastState.terminated.message}}{{end}}"
        echo
        echo ">>> describe pod"
        kubectl get pod -n default volume-test -o yaml
        echo
        echo ">>> show pod logs"
        kubectl logs -n default volume-test
        echo
        kubectl get pvc -o yaml
        echo
        kubectl get pv -o yaml
        echo
        kubectl get nodes
