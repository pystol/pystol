name: e2e-deploy-build

on: [push, pull_request]

jobs:
  build:
    # Originally from: https://github.com/kubernetes-sigs/kind/issues/865
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Install Helm
      id: install-helm
      run: |
        curl -L https://git.io/get_helm.sh | bash
        helm init --client-only

    - name: Run docker login
      id: pystol-login
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> Docker login quay.io"
        docker login -u="pystol+bot" -p="T2K5TLLL3ERE82F22SCVUF9M0ANY1ARR7NDR4CQ6P49H654WIMEQCNS0BL3O9Y2I" quay.io

    - name: Create Kubernetes Cluster
      id: kind
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: "v0.5.1"
        config: .github/e2e-templates/cluster.yaml

    - name: Install local-path provisioner
      id: local-path
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        kubectl delete storageclass --all
        kubectl apply -f https://github.com/rancher/local-path-provisioner/raw/master/deploy/local-path-storage.yaml
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m

    - name: Define and print relevant variables
      id: pystol-define-variables
      run: |
        echo ">>> Print the GitHub commit tag"
        echo $GITHUB_SHA
        echo
        echo ">>> Define the GitHub short commit tag"
        echo "::set-env name=GITHUB_SHORT_SHA::$(git rev-parse --short $GITHUB_SHA)"
        echo
        echo ">>> Create the image name"
        IMAGE_NAME=quay.io/pystol/pystol-operator-staging
        echo "::set-env name=IMAGE_NAME::$IMAGE_NAME"
        echo

    - name: Create the container image
      id: pystol-create-image
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo ">>> Print the short GitHub commit tag"
        echo $GITHUB_SHORT_SHA
        echo
        echo ">>> Build the container image"
        docker build --build-arg revision=$GITHUB_SHORT_SHA -t $IMAGE_NAME:$GITHUB_SHORT_SHA .
        echo
        echo ">>> Print the image name"
        echo "docker build --build-arg revision=$GITHUB_SHORT_SHA -t $IMAGE_NAME:$GITHUB_SHORT_SHA ."
        echo

    - name: Push the container image
      id: pystol-push-image
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> Push the container image"
        docker push $IMAGE_NAME:$GITHUB_SHORT_SHA
        echo
        echo ">>> Get the image digest"
        IMAGE_DIGEST=$(docker images --digests --format "{{.Tag}}-{{.Digest}}" $IMAGE_NAME | grep $GITHUB_SHORT_SHA | cut -d'-' -f2)
        echo
        echo ">>> Print the image digest"
        echo $IMAGE_DIGEST
        echo
        echo "::set-env name=IMAGE_DIGEST::$IMAGE_DIGEST"
        echo
        echo ">>> Debug image digests"
        docker images --digests $IMAGE_NAME:$GITHUB_SHORT_SHA
        echo

    - name: Deploy pystol
      id: pystol-deploy
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> Install Pystol deployment crd and rbac"
        # We apply the RBAC rules
        kubectl apply -f helm/templates/rbac.yaml
        echo
        # We deploy the operator using the image we created in the previous steps.
        # helm template is used to render the template with the needed parameters
        # ./helm/: Is the folder in which the Charts.yaml is defined
        # -f: Is the values.yaml with the default values deploying from stable:master
        # -x: Is the particular file we want to render
        helm template \
          --set appSettings.pystol.ui.image=$IMAGE_NAME@$IMAGE_DIGEST \
          --set appSettings.pystol.controller.image=$IMAGE_NAME@$IMAGE_DIGEST \
          --set appSettings.pystol.ui.api_host='labserver' \
          --set appSettings.pystol.ui.api_port=3000 \
          ./helm/ \
          -f helm/templates/values.yaml \
          -x templates/operator.yaml \
          | kubectl apply -f -
        echo
        # We add the CRD
        kubectl apply -f helm/templates/crd.yaml
        echo
        echo ">>> Get pods 12 times"
        for i in {1..12}; do kubectl get pod;echo;sleep 3; done

    - name: Debug pystol creation
      id: debug-pystol-deploy
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> Debug pystol-controller pod"
        kubectl describe pod `kubectl get pods | grep pystol-controller | head -n1 | cut -d' ' -f1`
        echo
        echo ">>> Debug pystol-ui pod"
        kubectl describe pod `kubectl get pods | grep pystol-controller | head -n1 | cut -d' ' -f1`
        echo
        echo ">>> Get pods 12 times"
        for i in {1..12}; do kubectl get pod;echo;sleep 10; done

    - name: Build
      run: id;pwd;lsblk;df;cat /proc/mounts

    - name: Wait for all to be deployed
      run: |
        echo
        echo ">>> Wait for all running before continue"
        export KUBECONFIG="$(kind get kubeconfig-path)"
        kubectl get all --all-namespaces
        # We wait for all pods to be created and running
        kubectl wait --for=condition=Ready pods -n default --all --timeout=5m
        kubectl wait --for=condition=Ready pods -n kube-system --all --timeout=5m
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m

    - name: Test Pystol CLI
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> run pystol CLI pystol -h"
        kubectl exec `kubectl get pods | grep pystol-controller | grep Running | head -n1 | cut -d' ' -f1` -- pystol -h
        echo
        echo ">>> run pystol CLI pystol -v"
        VERSION_OUTPUT=$(kubectl exec `kubectl get pods | grep pystol-controller | grep Running | head -n1 | cut -d' ' -f1` -- pystol -v)
        echo $VERSION_OUTPUT
        echo
        echo ">>> run pystol CLI pystol -b"
        kubectl exec `kubectl get pods | grep pystol-controller | grep Running | head -n1 | cut -d' ' -f1` -- pystol -b
        echo
        echo "Printing versions"
        echo "Version output from CLI: $VERSION_OUTPUT"
        echo "Version output from GitHub short SHA: $GITHUB_SHORT_SHA"
        echo
        if [[ $VERSION_OUTPUT == *$GITHUB_SHORT_SHA* ]]; then
            echo "GitHub commit ID matches with the deployed version"
        else
            echo "GitHub commit ID DO NOT MATCH with the deployed version"
            exit 1
        fi

    - name: Test
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo ">>> run pod"
        kubectl apply -f ${GITHUB_WORKSPACE}/.github/e2e-templates/rancher-provisioner-nonroot.yaml
        echo ">>> get pod"
        for i in {1..12}; do kubectl get pod;echo;sleep 5; done
        echo
        echo ">>> get pod"
        kubectl get pod volume-test -o go-template="{{range .status.containerStatuses}}{{.lastState.terminated.message}}{{end}}"
        echo
        echo ">>> describe pod"
        kubectl get pod -n default volume-test -o yaml
        echo
        echo ">>> show pod logs"
        kubectl logs -n default volume-test
        echo
        kubectl get pvc -o yaml
        echo
        kubectl get pv -o yaml
        echo
        kubectl get nodes
